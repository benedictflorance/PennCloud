// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_response_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_response_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_response_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_response_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_response_2eproto;
namespace PennCloud {
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Response_ServerStatusEntry_DoNotUse;
class Response_ServerStatusEntry_DoNotUseDefaultTypeInternal;
extern Response_ServerStatusEntry_DoNotUseDefaultTypeInternal _Response_ServerStatusEntry_DoNotUse_default_instance_;
}  // namespace PennCloud
PROTOBUF_NAMESPACE_OPEN
template<> ::PennCloud::Response* Arena::CreateMaybeMessage<::PennCloud::Response>(Arena*);
template<> ::PennCloud::Response_ServerStatusEntry_DoNotUse* Arena::CreateMaybeMessage<::PennCloud::Response_ServerStatusEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PennCloud {

// ===================================================================

class Response_ServerStatusEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Response_ServerStatusEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Response_ServerStatusEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, bool,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    0 > SuperType;
  Response_ServerStatusEntry_DoNotUse();
  Response_ServerStatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Response_ServerStatusEntry_DoNotUse& other);
  static const Response_ServerStatusEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Response_ServerStatusEntry_DoNotUse*>(&_Response_ServerStatusEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_response_2eproto);
    return ::descriptor_table_response_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PennCloud.Response) */ {
 public:
  inline Response() : Response(nullptr) {};
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PennCloud.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_response_2eproto);
    return ::descriptor_table_response_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kServerStatusFieldNumber = 4,
    kColKeysFieldNumber = 5,
    kRowKeysFieldNumber = 6,
    kStatusFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // map<int32, bool> server_status = 4;
  int server_status_size() const;
  private:
  int _internal_server_status_size() const;
  public:
  void clear_server_status();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
      _internal_server_status() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
      _internal_mutable_server_status();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
      server_status() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
      mutable_server_status();

  // repeated string col_keys = 5;
  int col_keys_size() const;
  private:
  int _internal_col_keys_size() const;
  public:
  void clear_col_keys();
  const std::string& col_keys(int index) const;
  std::string* mutable_col_keys(int index);
  void set_col_keys(int index, const std::string& value);
  void set_col_keys(int index, std::string&& value);
  void set_col_keys(int index, const char* value);
  void set_col_keys(int index, const char* value, size_t size);
  std::string* add_col_keys();
  void add_col_keys(const std::string& value);
  void add_col_keys(std::string&& value);
  void add_col_keys(const char* value);
  void add_col_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& col_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_col_keys();
  private:
  const std::string& _internal_col_keys(int index) const;
  std::string* _internal_add_col_keys();
  public:

  // repeated string row_keys = 6;
  int row_keys_size() const;
  private:
  int _internal_row_keys_size() const;
  public:
  void clear_row_keys();
  const std::string& row_keys(int index) const;
  std::string* mutable_row_keys(int index);
  void set_row_keys(int index, const std::string& value);
  void set_row_keys(int index, std::string&& value);
  void set_row_keys(int index, const char* value);
  void set_row_keys(int index, const char* value, size_t size);
  std::string* add_row_keys();
  void add_row_keys(const std::string& value);
  void add_row_keys(std::string&& value);
  void add_row_keys(const char* value);
  void add_row_keys(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& row_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_row_keys();
  private:
  const std::string& _internal_row_keys(int index) const;
  std::string* _internal_add_row_keys();
  public:

  // required string status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status(
      std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // optional string description = 2;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional bytes value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:PennCloud.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Response_ServerStatusEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, bool,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
      0 > server_status_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> col_keys_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> row_keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_response_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Response

// required string status = 1;
inline bool Response::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Response::has_status() const {
  return _internal_has_status();
}
inline void Response::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Response::status() const {
  // @@protoc_insertion_point(field_get:PennCloud.Response.status)
  return _internal_status();
}
inline void Response::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:PennCloud.Response.status)
}
inline std::string* Response::mutable_status() {
  // @@protoc_insertion_point(field_mutable:PennCloud.Response.status)
  return _internal_mutable_status();
}
inline const std::string& Response::_internal_status() const {
  return status_.Get();
}
inline void Response::_internal_set_status(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response::set_status(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Response.status)
}
inline void Response::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PennCloud.Response.status)
}
inline void Response::set_status(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Response.status)
}
inline std::string* Response::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000001u;
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response::release_status() {
  // @@protoc_insertion_point(field_release:PennCloud.Response.status)
  if (!_internal_has_status()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return status_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Response.status)
}
inline std::string* Response::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PennCloud.Response.status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response::unsafe_arena_set_allocated_status(
    std::string* status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PennCloud.Response.status)
}

// optional string description = 2;
inline bool Response::_internal_has_description() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Response::has_description() const {
  return _internal_has_description();
}
inline void Response::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Response::description() const {
  // @@protoc_insertion_point(field_get:PennCloud.Response.description)
  return _internal_description();
}
inline void Response::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:PennCloud.Response.description)
}
inline std::string* Response::mutable_description() {
  // @@protoc_insertion_point(field_mutable:PennCloud.Response.description)
  return _internal_mutable_description();
}
inline const std::string& Response::_internal_description() const {
  return description_.Get();
}
inline void Response::_internal_set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Response.description)
}
inline void Response::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PennCloud.Response.description)
}
inline void Response::set_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Response.description)
}
inline std::string* Response::_internal_mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response::release_description() {
  // @@protoc_insertion_point(field_release:PennCloud.Response.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Response.description)
}
inline std::string* Response::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PennCloud.Response.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PennCloud.Response.description)
}

// optional bytes value = 3;
inline bool Response::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Response::has_value() const {
  return _internal_has_value();
}
inline void Response::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Response::value() const {
  // @@protoc_insertion_point(field_get:PennCloud.Response.value)
  return _internal_value();
}
inline void Response::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:PennCloud.Response.value)
}
inline std::string* Response::mutable_value() {
  // @@protoc_insertion_point(field_mutable:PennCloud.Response.value)
  return _internal_mutable_value();
}
inline const std::string& Response::_internal_value() const {
  return value_.Get();
}
inline void Response::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Response.value)
}
inline void Response::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PennCloud.Response.value)
}
inline void Response::set_value(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Response.value)
}
inline std::string* Response::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000004u;
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response::release_value() {
  // @@protoc_insertion_point(field_release:PennCloud.Response.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Response.value)
}
inline std::string* Response::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PennCloud.Response.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PennCloud.Response.value)
}

// map<int32, bool> server_status = 4;
inline int Response::_internal_server_status_size() const {
  return server_status_.size();
}
inline int Response::server_status_size() const {
  return _internal_server_status_size();
}
inline void Response::clear_server_status() {
  server_status_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
Response::_internal_server_status() const {
  return server_status_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >&
Response::server_status() const {
  // @@protoc_insertion_point(field_map:PennCloud.Response.server_status)
  return _internal_server_status();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
Response::_internal_mutable_server_status() {
  return server_status_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, bool >*
Response::mutable_server_status() {
  // @@protoc_insertion_point(field_mutable_map:PennCloud.Response.server_status)
  return _internal_mutable_server_status();
}

// repeated string col_keys = 5;
inline int Response::_internal_col_keys_size() const {
  return col_keys_.size();
}
inline int Response::col_keys_size() const {
  return _internal_col_keys_size();
}
inline void Response::clear_col_keys() {
  col_keys_.Clear();
}
inline std::string* Response::add_col_keys() {
  // @@protoc_insertion_point(field_add_mutable:PennCloud.Response.col_keys)
  return _internal_add_col_keys();
}
inline const std::string& Response::_internal_col_keys(int index) const {
  return col_keys_.Get(index);
}
inline const std::string& Response::col_keys(int index) const {
  // @@protoc_insertion_point(field_get:PennCloud.Response.col_keys)
  return _internal_col_keys(index);
}
inline std::string* Response::mutable_col_keys(int index) {
  // @@protoc_insertion_point(field_mutable:PennCloud.Response.col_keys)
  return col_keys_.Mutable(index);
}
inline void Response::set_col_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:PennCloud.Response.col_keys)
  col_keys_.Mutable(index)->assign(value);
}
inline void Response::set_col_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:PennCloud.Response.col_keys)
  col_keys_.Mutable(index)->assign(std::move(value));
}
inline void Response::set_col_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  col_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PennCloud.Response.col_keys)
}
inline void Response::set_col_keys(int index, const char* value, size_t size) {
  col_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Response.col_keys)
}
inline std::string* Response::_internal_add_col_keys() {
  return col_keys_.Add();
}
inline void Response::add_col_keys(const std::string& value) {
  col_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PennCloud.Response.col_keys)
}
inline void Response::add_col_keys(std::string&& value) {
  col_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PennCloud.Response.col_keys)
}
inline void Response::add_col_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  col_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PennCloud.Response.col_keys)
}
inline void Response::add_col_keys(const char* value, size_t size) {
  col_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PennCloud.Response.col_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Response::col_keys() const {
  // @@protoc_insertion_point(field_list:PennCloud.Response.col_keys)
  return col_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Response::mutable_col_keys() {
  // @@protoc_insertion_point(field_mutable_list:PennCloud.Response.col_keys)
  return &col_keys_;
}

// repeated string row_keys = 6;
inline int Response::_internal_row_keys_size() const {
  return row_keys_.size();
}
inline int Response::row_keys_size() const {
  return _internal_row_keys_size();
}
inline void Response::clear_row_keys() {
  row_keys_.Clear();
}
inline std::string* Response::add_row_keys() {
  // @@protoc_insertion_point(field_add_mutable:PennCloud.Response.row_keys)
  return _internal_add_row_keys();
}
inline const std::string& Response::_internal_row_keys(int index) const {
  return row_keys_.Get(index);
}
inline const std::string& Response::row_keys(int index) const {
  // @@protoc_insertion_point(field_get:PennCloud.Response.row_keys)
  return _internal_row_keys(index);
}
inline std::string* Response::mutable_row_keys(int index) {
  // @@protoc_insertion_point(field_mutable:PennCloud.Response.row_keys)
  return row_keys_.Mutable(index);
}
inline void Response::set_row_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:PennCloud.Response.row_keys)
  row_keys_.Mutable(index)->assign(value);
}
inline void Response::set_row_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:PennCloud.Response.row_keys)
  row_keys_.Mutable(index)->assign(std::move(value));
}
inline void Response::set_row_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  row_keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PennCloud.Response.row_keys)
}
inline void Response::set_row_keys(int index, const char* value, size_t size) {
  row_keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Response.row_keys)
}
inline std::string* Response::_internal_add_row_keys() {
  return row_keys_.Add();
}
inline void Response::add_row_keys(const std::string& value) {
  row_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PennCloud.Response.row_keys)
}
inline void Response::add_row_keys(std::string&& value) {
  row_keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PennCloud.Response.row_keys)
}
inline void Response::add_row_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  row_keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PennCloud.Response.row_keys)
}
inline void Response::add_row_keys(const char* value, size_t size) {
  row_keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PennCloud.Response.row_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Response::row_keys() const {
  // @@protoc_insertion_point(field_list:PennCloud.Response.row_keys)
  return row_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Response::mutable_row_keys() {
  // @@protoc_insertion_point(field_mutable_list:PennCloud.Response.row_keys)
  return &row_keys_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PennCloud

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_response_2eproto
