// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#ifndef PROTOBUF_INCLUDED_request_2eproto
#define PROTOBUF_INCLUDED_request_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_request_2eproto 

namespace protobuf_request_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_request_2eproto
namespace PennCloud {
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace PennCloud
namespace google {
namespace protobuf {
template<> ::PennCloud::Request* Arena::CreateMaybeMessage<::PennCloud::Request>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace PennCloud {

// ===================================================================

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PennCloud.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(NULL);
  }

  Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string rowkey = 2;
  bool has_rowkey() const;
  void clear_rowkey();
  static const int kRowkeyFieldNumber = 2;
  const ::std::string& rowkey() const;
  void set_rowkey(const ::std::string& value);
  #if LANG_CXX11
  void set_rowkey(::std::string&& value);
  #endif
  void set_rowkey(const char* value);
  void set_rowkey(const char* value, size_t size);
  ::std::string* mutable_rowkey();
  ::std::string* release_rowkey();
  void set_allocated_rowkey(::std::string* rowkey);

  // optional string columnkey = 3;
  bool has_columnkey() const;
  void clear_columnkey();
  static const int kColumnkeyFieldNumber = 3;
  const ::std::string& columnkey() const;
  void set_columnkey(const ::std::string& value);
  #if LANG_CXX11
  void set_columnkey(::std::string&& value);
  #endif
  void set_columnkey(const char* value);
  void set_columnkey(const char* value, size_t size);
  ::std::string* mutable_columnkey();
  ::std::string* release_columnkey();
  void set_allocated_columnkey(::std::string* columnkey);

  // optional bytes value1 = 4;
  bool has_value1() const;
  void clear_value1();
  static const int kValue1FieldNumber = 4;
  const ::std::string& value1() const;
  void set_value1(const ::std::string& value);
  #if LANG_CXX11
  void set_value1(::std::string&& value);
  #endif
  void set_value1(const char* value);
  void set_value1(const void* value, size_t size);
  ::std::string* mutable_value1();
  ::std::string* release_value1();
  void set_allocated_value1(::std::string* value1);

  // optional bytes value2 = 5;
  bool has_value2() const;
  void clear_value2();
  static const int kValue2FieldNumber = 5;
  const ::std::string& value2() const;
  void set_value2(const ::std::string& value);
  #if LANG_CXX11
  void set_value2(::std::string&& value);
  #endif
  void set_value2(const char* value);
  void set_value2(const void* value, size_t size);
  ::std::string* mutable_value2();
  ::std::string* release_value2();
  void set_allocated_value2(::std::string* value2);

  // optional string command = 6;
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 6;
  const ::std::string& command() const;
  void set_command(const ::std::string& value);
  #if LANG_CXX11
  void set_command(::std::string&& value);
  #endif
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  ::std::string* mutable_command();
  ::std::string* release_command();
  void set_allocated_command(::std::string* command);

  // optional string isServer = 7;
  bool has_isserver() const;
  void clear_isserver();
  static const int kIsServerFieldNumber = 7;
  const ::std::string& isserver() const;
  void set_isserver(const ::std::string& value);
  #if LANG_CXX11
  void set_isserver(::std::string&& value);
  #endif
  void set_isserver(const char* value);
  void set_isserver(const char* value, size_t size);
  ::std::string* mutable_isserver();
  ::std::string* release_isserver();
  void set_allocated_isserver(::std::string* isserver);

  // optional string sender_server_index = 8;
  bool has_sender_server_index() const;
  void clear_sender_server_index();
  static const int kSenderServerIndexFieldNumber = 8;
  const ::std::string& sender_server_index() const;
  void set_sender_server_index(const ::std::string& value);
  #if LANG_CXX11
  void set_sender_server_index(::std::string&& value);
  #endif
  void set_sender_server_index(const char* value);
  void set_sender_server_index(const char* value, size_t size);
  ::std::string* mutable_sender_server_index();
  ::std::string* release_sender_server_index();
  void set_allocated_sender_server_index(::std::string* sender_server_index);

  // optional string uniqueid = 9;
  bool has_uniqueid() const;
  void clear_uniqueid();
  static const int kUniqueidFieldNumber = 9;
  const ::std::string& uniqueid() const;
  void set_uniqueid(const ::std::string& value);
  #if LANG_CXX11
  void set_uniqueid(::std::string&& value);
  #endif
  void set_uniqueid(const char* value);
  void set_uniqueid(const char* value, size_t size);
  ::std::string* mutable_uniqueid();
  ::std::string* release_uniqueid();
  void set_allocated_uniqueid(::std::string* uniqueid);

  // optional string preprocessed_response = 10;
  bool has_preprocessed_response() const;
  void clear_preprocessed_response();
  static const int kPreprocessedResponseFieldNumber = 10;
  const ::std::string& preprocessed_response() const;
  void set_preprocessed_response(const ::std::string& value);
  #if LANG_CXX11
  void set_preprocessed_response(::std::string&& value);
  #endif
  void set_preprocessed_response(const char* value);
  void set_preprocessed_response(const char* value, size_t size);
  ::std::string* mutable_preprocessed_response();
  ::std::string* release_preprocessed_response();
  void set_allocated_preprocessed_response(::std::string* preprocessed_response);

  // optional string sequence_number = 11;
  bool has_sequence_number() const;
  void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 11;
  const ::std::string& sequence_number() const;
  void set_sequence_number(const ::std::string& value);
  #if LANG_CXX11
  void set_sequence_number(::std::string&& value);
  #endif
  void set_sequence_number(const char* value);
  void set_sequence_number(const char* value, size_t size);
  ::std::string* mutable_sequence_number();
  ::std::string* release_sequence_number();
  void set_allocated_sequence_number(::std::string* sequence_number);

  // optional string new_primary_index = 12;
  bool has_new_primary_index() const;
  void clear_new_primary_index();
  static const int kNewPrimaryIndexFieldNumber = 12;
  const ::std::string& new_primary_index() const;
  void set_new_primary_index(const ::std::string& value);
  #if LANG_CXX11
  void set_new_primary_index(::std::string&& value);
  #endif
  void set_new_primary_index(const char* value);
  void set_new_primary_index(const char* value, size_t size);
  ::std::string* mutable_new_primary_index();
  ::std::string* release_new_primary_index();
  void set_allocated_new_primary_index(::std::string* new_primary_index);

  // optional string modified_server_index = 13;
  bool has_modified_server_index() const;
  void clear_modified_server_index();
  static const int kModifiedServerIndexFieldNumber = 13;
  const ::std::string& modified_server_index() const;
  void set_modified_server_index(const ::std::string& value);
  #if LANG_CXX11
  void set_modified_server_index(::std::string&& value);
  #endif
  void set_modified_server_index(const char* value);
  void set_modified_server_index(const char* value, size_t size);
  ::std::string* mutable_modified_server_index();
  ::std::string* release_modified_server_index();
  void set_allocated_modified_server_index(::std::string* modified_server_index);

  // @@protoc_insertion_point(class_scope:PennCloud.Request)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_rowkey();
  void clear_has_rowkey();
  void set_has_columnkey();
  void clear_has_columnkey();
  void set_has_value1();
  void clear_has_value1();
  void set_has_value2();
  void clear_has_value2();
  void set_has_command();
  void clear_has_command();
  void set_has_isserver();
  void clear_has_isserver();
  void set_has_sender_server_index();
  void clear_has_sender_server_index();
  void set_has_uniqueid();
  void clear_has_uniqueid();
  void set_has_preprocessed_response();
  void clear_has_preprocessed_response();
  void set_has_sequence_number();
  void clear_has_sequence_number();
  void set_has_new_primary_index();
  void clear_has_new_primary_index();
  void set_has_modified_server_index();
  void clear_has_modified_server_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr rowkey_;
  ::google::protobuf::internal::ArenaStringPtr columnkey_;
  ::google::protobuf::internal::ArenaStringPtr value1_;
  ::google::protobuf::internal::ArenaStringPtr value2_;
  ::google::protobuf::internal::ArenaStringPtr command_;
  ::google::protobuf::internal::ArenaStringPtr isserver_;
  ::google::protobuf::internal::ArenaStringPtr sender_server_index_;
  ::google::protobuf::internal::ArenaStringPtr uniqueid_;
  ::google::protobuf::internal::ArenaStringPtr preprocessed_response_;
  ::google::protobuf::internal::ArenaStringPtr sequence_number_;
  ::google::protobuf::internal::ArenaStringPtr new_primary_index_;
  ::google::protobuf::internal::ArenaStringPtr modified_server_index_;
  friend struct ::protobuf_request_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// required string type = 1;
inline bool Request::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& Request::type() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.type)
  return type_.GetNoArena();
}
inline void Request::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.type)
}
#if LANG_CXX11
inline void Request::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.type)
}
#endif
inline void Request::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.type)
}
inline void Request::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.type)
}
inline ::std::string* Request::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_type() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.type)
  if (!has_type()) {
    return NULL;
  }
  clear_has_type();
  return type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.type)
}

// optional string rowkey = 2;
inline bool Request::has_rowkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_rowkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_rowkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_rowkey() {
  rowkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rowkey();
}
inline const ::std::string& Request::rowkey() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.rowkey)
  return rowkey_.GetNoArena();
}
inline void Request::set_rowkey(const ::std::string& value) {
  set_has_rowkey();
  rowkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.rowkey)
}
#if LANG_CXX11
inline void Request::set_rowkey(::std::string&& value) {
  set_has_rowkey();
  rowkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.rowkey)
}
#endif
inline void Request::set_rowkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rowkey();
  rowkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.rowkey)
}
inline void Request::set_rowkey(const char* value, size_t size) {
  set_has_rowkey();
  rowkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.rowkey)
}
inline ::std::string* Request::mutable_rowkey() {
  set_has_rowkey();
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.rowkey)
  return rowkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_rowkey() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.rowkey)
  if (!has_rowkey()) {
    return NULL;
  }
  clear_has_rowkey();
  return rowkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_rowkey(::std::string* rowkey) {
  if (rowkey != NULL) {
    set_has_rowkey();
  } else {
    clear_has_rowkey();
  }
  rowkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rowkey);
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.rowkey)
}

// optional string columnkey = 3;
inline bool Request::has_columnkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_columnkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_columnkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_columnkey() {
  columnkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_columnkey();
}
inline const ::std::string& Request::columnkey() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.columnkey)
  return columnkey_.GetNoArena();
}
inline void Request::set_columnkey(const ::std::string& value) {
  set_has_columnkey();
  columnkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.columnkey)
}
#if LANG_CXX11
inline void Request::set_columnkey(::std::string&& value) {
  set_has_columnkey();
  columnkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.columnkey)
}
#endif
inline void Request::set_columnkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_columnkey();
  columnkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.columnkey)
}
inline void Request::set_columnkey(const char* value, size_t size) {
  set_has_columnkey();
  columnkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.columnkey)
}
inline ::std::string* Request::mutable_columnkey() {
  set_has_columnkey();
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.columnkey)
  return columnkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_columnkey() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.columnkey)
  if (!has_columnkey()) {
    return NULL;
  }
  clear_has_columnkey();
  return columnkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_columnkey(::std::string* columnkey) {
  if (columnkey != NULL) {
    set_has_columnkey();
  } else {
    clear_has_columnkey();
  }
  columnkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), columnkey);
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.columnkey)
}

// optional bytes value1 = 4;
inline bool Request::has_value1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_value1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_value1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_value1() {
  value1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value1();
}
inline const ::std::string& Request::value1() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.value1)
  return value1_.GetNoArena();
}
inline void Request::set_value1(const ::std::string& value) {
  set_has_value1();
  value1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.value1)
}
#if LANG_CXX11
inline void Request::set_value1(::std::string&& value) {
  set_has_value1();
  value1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.value1)
}
#endif
inline void Request::set_value1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value1();
  value1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.value1)
}
inline void Request::set_value1(const void* value, size_t size) {
  set_has_value1();
  value1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.value1)
}
inline ::std::string* Request::mutable_value1() {
  set_has_value1();
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.value1)
  return value1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_value1() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.value1)
  if (!has_value1()) {
    return NULL;
  }
  clear_has_value1();
  return value1_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_value1(::std::string* value1) {
  if (value1 != NULL) {
    set_has_value1();
  } else {
    clear_has_value1();
  }
  value1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value1);
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.value1)
}

// optional bytes value2 = 5;
inline bool Request::has_value2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Request::set_has_value2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Request::clear_has_value2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Request::clear_value2() {
  value2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value2();
}
inline const ::std::string& Request::value2() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.value2)
  return value2_.GetNoArena();
}
inline void Request::set_value2(const ::std::string& value) {
  set_has_value2();
  value2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.value2)
}
#if LANG_CXX11
inline void Request::set_value2(::std::string&& value) {
  set_has_value2();
  value2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.value2)
}
#endif
inline void Request::set_value2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value2();
  value2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.value2)
}
inline void Request::set_value2(const void* value, size_t size) {
  set_has_value2();
  value2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.value2)
}
inline ::std::string* Request::mutable_value2() {
  set_has_value2();
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.value2)
  return value2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_value2() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.value2)
  if (!has_value2()) {
    return NULL;
  }
  clear_has_value2();
  return value2_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_value2(::std::string* value2) {
  if (value2 != NULL) {
    set_has_value2();
  } else {
    clear_has_value2();
  }
  value2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value2);
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.value2)
}

// optional string command = 6;
inline bool Request::has_command() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Request::set_has_command() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Request::clear_has_command() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Request::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_command();
}
inline const ::std::string& Request::command() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.command)
  return command_.GetNoArena();
}
inline void Request::set_command(const ::std::string& value) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.command)
}
#if LANG_CXX11
inline void Request::set_command(::std::string&& value) {
  set_has_command();
  command_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.command)
}
#endif
inline void Request::set_command(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.command)
}
inline void Request::set_command(const char* value, size_t size) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.command)
}
inline ::std::string* Request::mutable_command() {
  set_has_command();
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.command)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_command() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.command)
  if (!has_command()) {
    return NULL;
  }
  clear_has_command();
  return command_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    set_has_command();
  } else {
    clear_has_command();
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.command)
}

// optional string isServer = 7;
inline bool Request::has_isserver() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Request::set_has_isserver() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Request::clear_has_isserver() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Request::clear_isserver() {
  isserver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_isserver();
}
inline const ::std::string& Request::isserver() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.isServer)
  return isserver_.GetNoArena();
}
inline void Request::set_isserver(const ::std::string& value) {
  set_has_isserver();
  isserver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.isServer)
}
#if LANG_CXX11
inline void Request::set_isserver(::std::string&& value) {
  set_has_isserver();
  isserver_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.isServer)
}
#endif
inline void Request::set_isserver(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_isserver();
  isserver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.isServer)
}
inline void Request::set_isserver(const char* value, size_t size) {
  set_has_isserver();
  isserver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.isServer)
}
inline ::std::string* Request::mutable_isserver() {
  set_has_isserver();
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.isServer)
  return isserver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_isserver() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.isServer)
  if (!has_isserver()) {
    return NULL;
  }
  clear_has_isserver();
  return isserver_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_isserver(::std::string* isserver) {
  if (isserver != NULL) {
    set_has_isserver();
  } else {
    clear_has_isserver();
  }
  isserver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), isserver);
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.isServer)
}

// optional string sender_server_index = 8;
inline bool Request::has_sender_server_index() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Request::set_has_sender_server_index() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Request::clear_has_sender_server_index() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Request::clear_sender_server_index() {
  sender_server_index_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sender_server_index();
}
inline const ::std::string& Request::sender_server_index() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.sender_server_index)
  return sender_server_index_.GetNoArena();
}
inline void Request::set_sender_server_index(const ::std::string& value) {
  set_has_sender_server_index();
  sender_server_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.sender_server_index)
}
#if LANG_CXX11
inline void Request::set_sender_server_index(::std::string&& value) {
  set_has_sender_server_index();
  sender_server_index_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.sender_server_index)
}
#endif
inline void Request::set_sender_server_index(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sender_server_index();
  sender_server_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.sender_server_index)
}
inline void Request::set_sender_server_index(const char* value, size_t size) {
  set_has_sender_server_index();
  sender_server_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.sender_server_index)
}
inline ::std::string* Request::mutable_sender_server_index() {
  set_has_sender_server_index();
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.sender_server_index)
  return sender_server_index_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_sender_server_index() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.sender_server_index)
  if (!has_sender_server_index()) {
    return NULL;
  }
  clear_has_sender_server_index();
  return sender_server_index_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_sender_server_index(::std::string* sender_server_index) {
  if (sender_server_index != NULL) {
    set_has_sender_server_index();
  } else {
    clear_has_sender_server_index();
  }
  sender_server_index_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_server_index);
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.sender_server_index)
}

// optional string uniqueid = 9;
inline bool Request::has_uniqueid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Request::set_has_uniqueid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Request::clear_has_uniqueid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Request::clear_uniqueid() {
  uniqueid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uniqueid();
}
inline const ::std::string& Request::uniqueid() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.uniqueid)
  return uniqueid_.GetNoArena();
}
inline void Request::set_uniqueid(const ::std::string& value) {
  set_has_uniqueid();
  uniqueid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.uniqueid)
}
#if LANG_CXX11
inline void Request::set_uniqueid(::std::string&& value) {
  set_has_uniqueid();
  uniqueid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.uniqueid)
}
#endif
inline void Request::set_uniqueid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_uniqueid();
  uniqueid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.uniqueid)
}
inline void Request::set_uniqueid(const char* value, size_t size) {
  set_has_uniqueid();
  uniqueid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.uniqueid)
}
inline ::std::string* Request::mutable_uniqueid() {
  set_has_uniqueid();
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.uniqueid)
  return uniqueid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_uniqueid() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.uniqueid)
  if (!has_uniqueid()) {
    return NULL;
  }
  clear_has_uniqueid();
  return uniqueid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_uniqueid(::std::string* uniqueid) {
  if (uniqueid != NULL) {
    set_has_uniqueid();
  } else {
    clear_has_uniqueid();
  }
  uniqueid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uniqueid);
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.uniqueid)
}

// optional string preprocessed_response = 10;
inline bool Request::has_preprocessed_response() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Request::set_has_preprocessed_response() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Request::clear_has_preprocessed_response() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Request::clear_preprocessed_response() {
  preprocessed_response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_preprocessed_response();
}
inline const ::std::string& Request::preprocessed_response() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.preprocessed_response)
  return preprocessed_response_.GetNoArena();
}
inline void Request::set_preprocessed_response(const ::std::string& value) {
  set_has_preprocessed_response();
  preprocessed_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.preprocessed_response)
}
#if LANG_CXX11
inline void Request::set_preprocessed_response(::std::string&& value) {
  set_has_preprocessed_response();
  preprocessed_response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.preprocessed_response)
}
#endif
inline void Request::set_preprocessed_response(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_preprocessed_response();
  preprocessed_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.preprocessed_response)
}
inline void Request::set_preprocessed_response(const char* value, size_t size) {
  set_has_preprocessed_response();
  preprocessed_response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.preprocessed_response)
}
inline ::std::string* Request::mutable_preprocessed_response() {
  set_has_preprocessed_response();
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.preprocessed_response)
  return preprocessed_response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_preprocessed_response() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.preprocessed_response)
  if (!has_preprocessed_response()) {
    return NULL;
  }
  clear_has_preprocessed_response();
  return preprocessed_response_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_preprocessed_response(::std::string* preprocessed_response) {
  if (preprocessed_response != NULL) {
    set_has_preprocessed_response();
  } else {
    clear_has_preprocessed_response();
  }
  preprocessed_response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preprocessed_response);
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.preprocessed_response)
}

// optional string sequence_number = 11;
inline bool Request::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Request::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Request::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Request::clear_sequence_number() {
  sequence_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sequence_number();
}
inline const ::std::string& Request::sequence_number() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.sequence_number)
  return sequence_number_.GetNoArena();
}
inline void Request::set_sequence_number(const ::std::string& value) {
  set_has_sequence_number();
  sequence_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.sequence_number)
}
#if LANG_CXX11
inline void Request::set_sequence_number(::std::string&& value) {
  set_has_sequence_number();
  sequence_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.sequence_number)
}
#endif
inline void Request::set_sequence_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sequence_number();
  sequence_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.sequence_number)
}
inline void Request::set_sequence_number(const char* value, size_t size) {
  set_has_sequence_number();
  sequence_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.sequence_number)
}
inline ::std::string* Request::mutable_sequence_number() {
  set_has_sequence_number();
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.sequence_number)
  return sequence_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_sequence_number() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.sequence_number)
  if (!has_sequence_number()) {
    return NULL;
  }
  clear_has_sequence_number();
  return sequence_number_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_sequence_number(::std::string* sequence_number) {
  if (sequence_number != NULL) {
    set_has_sequence_number();
  } else {
    clear_has_sequence_number();
  }
  sequence_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence_number);
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.sequence_number)
}

// optional string new_primary_index = 12;
inline bool Request::has_new_primary_index() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Request::set_has_new_primary_index() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Request::clear_has_new_primary_index() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Request::clear_new_primary_index() {
  new_primary_index_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_new_primary_index();
}
inline const ::std::string& Request::new_primary_index() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.new_primary_index)
  return new_primary_index_.GetNoArena();
}
inline void Request::set_new_primary_index(const ::std::string& value) {
  set_has_new_primary_index();
  new_primary_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.new_primary_index)
}
#if LANG_CXX11
inline void Request::set_new_primary_index(::std::string&& value) {
  set_has_new_primary_index();
  new_primary_index_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.new_primary_index)
}
#endif
inline void Request::set_new_primary_index(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_new_primary_index();
  new_primary_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.new_primary_index)
}
inline void Request::set_new_primary_index(const char* value, size_t size) {
  set_has_new_primary_index();
  new_primary_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.new_primary_index)
}
inline ::std::string* Request::mutable_new_primary_index() {
  set_has_new_primary_index();
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.new_primary_index)
  return new_primary_index_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_new_primary_index() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.new_primary_index)
  if (!has_new_primary_index()) {
    return NULL;
  }
  clear_has_new_primary_index();
  return new_primary_index_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_new_primary_index(::std::string* new_primary_index) {
  if (new_primary_index != NULL) {
    set_has_new_primary_index();
  } else {
    clear_has_new_primary_index();
  }
  new_primary_index_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_primary_index);
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.new_primary_index)
}

// optional string modified_server_index = 13;
inline bool Request::has_modified_server_index() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Request::set_has_modified_server_index() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Request::clear_has_modified_server_index() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Request::clear_modified_server_index() {
  modified_server_index_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_modified_server_index();
}
inline const ::std::string& Request::modified_server_index() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.modified_server_index)
  return modified_server_index_.GetNoArena();
}
inline void Request::set_modified_server_index(const ::std::string& value) {
  set_has_modified_server_index();
  modified_server_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.modified_server_index)
}
#if LANG_CXX11
inline void Request::set_modified_server_index(::std::string&& value) {
  set_has_modified_server_index();
  modified_server_index_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.modified_server_index)
}
#endif
inline void Request::set_modified_server_index(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_modified_server_index();
  modified_server_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.modified_server_index)
}
inline void Request::set_modified_server_index(const char* value, size_t size) {
  set_has_modified_server_index();
  modified_server_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.modified_server_index)
}
inline ::std::string* Request::mutable_modified_server_index() {
  set_has_modified_server_index();
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.modified_server_index)
  return modified_server_index_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_modified_server_index() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.modified_server_index)
  if (!has_modified_server_index()) {
    return NULL;
  }
  clear_has_modified_server_index();
  return modified_server_index_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_modified_server_index(::std::string* modified_server_index) {
  if (modified_server_index != NULL) {
    set_has_modified_server_index();
  } else {
    clear_has_modified_server_index();
  }
  modified_server_index_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modified_server_index);
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.modified_server_index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace PennCloud

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_request_2eproto
