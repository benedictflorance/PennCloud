// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_request_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_request_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_request_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_request_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_request_2eproto;
namespace PennCloud {
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Request_RowkeyVersionEntry_DoNotUse;
class Request_RowkeyVersionEntry_DoNotUseDefaultTypeInternal;
extern Request_RowkeyVersionEntry_DoNotUseDefaultTypeInternal _Request_RowkeyVersionEntry_DoNotUse_default_instance_;
}  // namespace PennCloud
PROTOBUF_NAMESPACE_OPEN
template<> ::PennCloud::Request* Arena::CreateMaybeMessage<::PennCloud::Request>(Arena*);
template<> ::PennCloud::Request_RowkeyVersionEntry_DoNotUse* Arena::CreateMaybeMessage<::PennCloud::Request_RowkeyVersionEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PennCloud {

// ===================================================================

class Request_RowkeyVersionEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Request_RowkeyVersionEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Request_RowkeyVersionEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  Request_RowkeyVersionEntry_DoNotUse();
  Request_RowkeyVersionEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Request_RowkeyVersionEntry_DoNotUse& other);
  static const Request_RowkeyVersionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Request_RowkeyVersionEntry_DoNotUse*>(&_Request_RowkeyVersionEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "PennCloud.Request.RowkeyVersionEntry.key");
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_request_2eproto);
    return ::descriptor_table_request_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PennCloud.Request) */ {
 public:
  inline Request() : Request(nullptr) {};
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PennCloud.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_request_2eproto);
    return ::descriptor_table_request_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRowkeyVersionFieldNumber = 14,
    kTypeFieldNumber = 1,
    kRowkeyFieldNumber = 2,
    kColumnkeyFieldNumber = 3,
    kValue1FieldNumber = 4,
    kValue2FieldNumber = 5,
    kCommandFieldNumber = 6,
    kIsServerFieldNumber = 7,
    kSenderServerIndexFieldNumber = 8,
    kUniqueidFieldNumber = 9,
    kPreprocessedResponseFieldNumber = 10,
    kSequenceNumberFieldNumber = 11,
    kNewPrimaryIndexFieldNumber = 12,
    kModifiedServerIndexFieldNumber = 13,
  };
  // map<string, int32> rowkey_version = 14;
  int rowkey_version_size() const;
  private:
  int _internal_rowkey_version_size() const;
  public:
  void clear_rowkey_version();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_rowkey_version() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_rowkey_version();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      rowkey_version() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_rowkey_version();

  // required string type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string rowkey = 2;
  bool has_rowkey() const;
  private:
  bool _internal_has_rowkey() const;
  public:
  void clear_rowkey();
  const std::string& rowkey() const;
  void set_rowkey(const std::string& value);
  void set_rowkey(std::string&& value);
  void set_rowkey(const char* value);
  void set_rowkey(const char* value, size_t size);
  std::string* mutable_rowkey();
  std::string* release_rowkey();
  void set_allocated_rowkey(std::string* rowkey);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rowkey();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rowkey(
      std::string* rowkey);
  private:
  const std::string& _internal_rowkey() const;
  void _internal_set_rowkey(const std::string& value);
  std::string* _internal_mutable_rowkey();
  public:

  // optional string columnkey = 3;
  bool has_columnkey() const;
  private:
  bool _internal_has_columnkey() const;
  public:
  void clear_columnkey();
  const std::string& columnkey() const;
  void set_columnkey(const std::string& value);
  void set_columnkey(std::string&& value);
  void set_columnkey(const char* value);
  void set_columnkey(const char* value, size_t size);
  std::string* mutable_columnkey();
  std::string* release_columnkey();
  void set_allocated_columnkey(std::string* columnkey);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_columnkey();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_columnkey(
      std::string* columnkey);
  private:
  const std::string& _internal_columnkey() const;
  void _internal_set_columnkey(const std::string& value);
  std::string* _internal_mutable_columnkey();
  public:

  // optional bytes value1 = 4;
  bool has_value1() const;
  private:
  bool _internal_has_value1() const;
  public:
  void clear_value1();
  const std::string& value1() const;
  void set_value1(const std::string& value);
  void set_value1(std::string&& value);
  void set_value1(const char* value);
  void set_value1(const void* value, size_t size);
  std::string* mutable_value1();
  std::string* release_value1();
  void set_allocated_value1(std::string* value1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value1(
      std::string* value1);
  private:
  const std::string& _internal_value1() const;
  void _internal_set_value1(const std::string& value);
  std::string* _internal_mutable_value1();
  public:

  // optional bytes value2 = 5;
  bool has_value2() const;
  private:
  bool _internal_has_value2() const;
  public:
  void clear_value2();
  const std::string& value2() const;
  void set_value2(const std::string& value);
  void set_value2(std::string&& value);
  void set_value2(const char* value);
  void set_value2(const void* value, size_t size);
  std::string* mutable_value2();
  std::string* release_value2();
  void set_allocated_value2(std::string* value2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value2(
      std::string* value2);
  private:
  const std::string& _internal_value2() const;
  void _internal_set_value2(const std::string& value);
  std::string* _internal_mutable_value2();
  public:

  // optional string command = 6;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_command();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_command(
      std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // optional string isServer = 7;
  bool has_isserver() const;
  private:
  bool _internal_has_isserver() const;
  public:
  void clear_isserver();
  const std::string& isserver() const;
  void set_isserver(const std::string& value);
  void set_isserver(std::string&& value);
  void set_isserver(const char* value);
  void set_isserver(const char* value, size_t size);
  std::string* mutable_isserver();
  std::string* release_isserver();
  void set_allocated_isserver(std::string* isserver);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_isserver();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_isserver(
      std::string* isserver);
  private:
  const std::string& _internal_isserver() const;
  void _internal_set_isserver(const std::string& value);
  std::string* _internal_mutable_isserver();
  public:

  // optional string sender_server_index = 8;
  bool has_sender_server_index() const;
  private:
  bool _internal_has_sender_server_index() const;
  public:
  void clear_sender_server_index();
  const std::string& sender_server_index() const;
  void set_sender_server_index(const std::string& value);
  void set_sender_server_index(std::string&& value);
  void set_sender_server_index(const char* value);
  void set_sender_server_index(const char* value, size_t size);
  std::string* mutable_sender_server_index();
  std::string* release_sender_server_index();
  void set_allocated_sender_server_index(std::string* sender_server_index);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sender_server_index();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sender_server_index(
      std::string* sender_server_index);
  private:
  const std::string& _internal_sender_server_index() const;
  void _internal_set_sender_server_index(const std::string& value);
  std::string* _internal_mutable_sender_server_index();
  public:

  // optional string uniqueid = 9;
  bool has_uniqueid() const;
  private:
  bool _internal_has_uniqueid() const;
  public:
  void clear_uniqueid();
  const std::string& uniqueid() const;
  void set_uniqueid(const std::string& value);
  void set_uniqueid(std::string&& value);
  void set_uniqueid(const char* value);
  void set_uniqueid(const char* value, size_t size);
  std::string* mutable_uniqueid();
  std::string* release_uniqueid();
  void set_allocated_uniqueid(std::string* uniqueid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uniqueid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uniqueid(
      std::string* uniqueid);
  private:
  const std::string& _internal_uniqueid() const;
  void _internal_set_uniqueid(const std::string& value);
  std::string* _internal_mutable_uniqueid();
  public:

  // optional string preprocessed_response = 10;
  bool has_preprocessed_response() const;
  private:
  bool _internal_has_preprocessed_response() const;
  public:
  void clear_preprocessed_response();
  const std::string& preprocessed_response() const;
  void set_preprocessed_response(const std::string& value);
  void set_preprocessed_response(std::string&& value);
  void set_preprocessed_response(const char* value);
  void set_preprocessed_response(const char* value, size_t size);
  std::string* mutable_preprocessed_response();
  std::string* release_preprocessed_response();
  void set_allocated_preprocessed_response(std::string* preprocessed_response);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_preprocessed_response();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_preprocessed_response(
      std::string* preprocessed_response);
  private:
  const std::string& _internal_preprocessed_response() const;
  void _internal_set_preprocessed_response(const std::string& value);
  std::string* _internal_mutable_preprocessed_response();
  public:

  // optional string sequence_number = 11;
  bool has_sequence_number() const;
  private:
  bool _internal_has_sequence_number() const;
  public:
  void clear_sequence_number();
  const std::string& sequence_number() const;
  void set_sequence_number(const std::string& value);
  void set_sequence_number(std::string&& value);
  void set_sequence_number(const char* value);
  void set_sequence_number(const char* value, size_t size);
  std::string* mutable_sequence_number();
  std::string* release_sequence_number();
  void set_allocated_sequence_number(std::string* sequence_number);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sequence_number();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sequence_number(
      std::string* sequence_number);
  private:
  const std::string& _internal_sequence_number() const;
  void _internal_set_sequence_number(const std::string& value);
  std::string* _internal_mutable_sequence_number();
  public:

  // optional string new_primary_index = 12;
  bool has_new_primary_index() const;
  private:
  bool _internal_has_new_primary_index() const;
  public:
  void clear_new_primary_index();
  const std::string& new_primary_index() const;
  void set_new_primary_index(const std::string& value);
  void set_new_primary_index(std::string&& value);
  void set_new_primary_index(const char* value);
  void set_new_primary_index(const char* value, size_t size);
  std::string* mutable_new_primary_index();
  std::string* release_new_primary_index();
  void set_allocated_new_primary_index(std::string* new_primary_index);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_new_primary_index();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_new_primary_index(
      std::string* new_primary_index);
  private:
  const std::string& _internal_new_primary_index() const;
  void _internal_set_new_primary_index(const std::string& value);
  std::string* _internal_mutable_new_primary_index();
  public:

  // optional string modified_server_index = 13;
  bool has_modified_server_index() const;
  private:
  bool _internal_has_modified_server_index() const;
  public:
  void clear_modified_server_index();
  const std::string& modified_server_index() const;
  void set_modified_server_index(const std::string& value);
  void set_modified_server_index(std::string&& value);
  void set_modified_server_index(const char* value);
  void set_modified_server_index(const char* value, size_t size);
  std::string* mutable_modified_server_index();
  std::string* release_modified_server_index();
  void set_allocated_modified_server_index(std::string* modified_server_index);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_modified_server_index();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_modified_server_index(
      std::string* modified_server_index);
  private:
  const std::string& _internal_modified_server_index() const;
  void _internal_set_modified_server_index(const std::string& value);
  std::string* _internal_mutable_modified_server_index();
  public:

  // @@protoc_insertion_point(class_scope:PennCloud.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Request_RowkeyVersionEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      0 > rowkey_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rowkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr columnkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr isserver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_server_index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uniqueid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preprocessed_response_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sequence_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_primary_index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modified_server_index_;
  friend struct ::TableStruct_request_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Request

// required string type = 1;
inline bool Request::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request::has_type() const {
  return _internal_has_type();
}
inline void Request::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request::type() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.type)
  return _internal_type();
}
inline void Request::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.type)
}
inline std::string* Request::mutable_type() {
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.type)
  return _internal_mutable_type();
}
inline const std::string& Request::_internal_type() const {
  return type_.Get();
}
inline void Request::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.type)
}
inline void Request::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.type)
}
inline void Request::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.type)
}
inline std::string* Request::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_type() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.type)
}
inline std::string* Request::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PennCloud.Request.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PennCloud.Request.type)
}

// optional string rowkey = 2;
inline bool Request::_internal_has_rowkey() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request::has_rowkey() const {
  return _internal_has_rowkey();
}
inline void Request::clear_rowkey() {
  rowkey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Request::rowkey() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.rowkey)
  return _internal_rowkey();
}
inline void Request::set_rowkey(const std::string& value) {
  _internal_set_rowkey(value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.rowkey)
}
inline std::string* Request::mutable_rowkey() {
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.rowkey)
  return _internal_mutable_rowkey();
}
inline const std::string& Request::_internal_rowkey() const {
  return rowkey_.Get();
}
inline void Request::_internal_set_rowkey(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  rowkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_rowkey(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  rowkey_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.rowkey)
}
inline void Request::set_rowkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  rowkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.rowkey)
}
inline void Request::set_rowkey(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  rowkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.rowkey)
}
inline std::string* Request::_internal_mutable_rowkey() {
  _has_bits_[0] |= 0x00000002u;
  return rowkey_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_rowkey() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.rowkey)
  if (!_internal_has_rowkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return rowkey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_rowkey(std::string* rowkey) {
  if (rowkey != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rowkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rowkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.rowkey)
}
inline std::string* Request::unsafe_arena_release_rowkey() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PennCloud.Request.rowkey)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return rowkey_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request::unsafe_arena_set_allocated_rowkey(
    std::string* rowkey) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rowkey != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rowkey_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rowkey, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PennCloud.Request.rowkey)
}

// optional string columnkey = 3;
inline bool Request::_internal_has_columnkey() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Request::has_columnkey() const {
  return _internal_has_columnkey();
}
inline void Request::clear_columnkey() {
  columnkey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Request::columnkey() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.columnkey)
  return _internal_columnkey();
}
inline void Request::set_columnkey(const std::string& value) {
  _internal_set_columnkey(value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.columnkey)
}
inline std::string* Request::mutable_columnkey() {
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.columnkey)
  return _internal_mutable_columnkey();
}
inline const std::string& Request::_internal_columnkey() const {
  return columnkey_.Get();
}
inline void Request::_internal_set_columnkey(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  columnkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_columnkey(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  columnkey_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.columnkey)
}
inline void Request::set_columnkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  columnkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.columnkey)
}
inline void Request::set_columnkey(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  columnkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.columnkey)
}
inline std::string* Request::_internal_mutable_columnkey() {
  _has_bits_[0] |= 0x00000004u;
  return columnkey_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_columnkey() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.columnkey)
  if (!_internal_has_columnkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return columnkey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_columnkey(std::string* columnkey) {
  if (columnkey != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  columnkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), columnkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.columnkey)
}
inline std::string* Request::unsafe_arena_release_columnkey() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PennCloud.Request.columnkey)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return columnkey_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request::unsafe_arena_set_allocated_columnkey(
    std::string* columnkey) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (columnkey != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  columnkey_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      columnkey, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PennCloud.Request.columnkey)
}

// optional bytes value1 = 4;
inline bool Request::_internal_has_value1() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Request::has_value1() const {
  return _internal_has_value1();
}
inline void Request::clear_value1() {
  value1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Request::value1() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.value1)
  return _internal_value1();
}
inline void Request::set_value1(const std::string& value) {
  _internal_set_value1(value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.value1)
}
inline std::string* Request::mutable_value1() {
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.value1)
  return _internal_mutable_value1();
}
inline const std::string& Request::_internal_value1() const {
  return value1_.Get();
}
inline void Request::_internal_set_value1(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  value1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_value1(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  value1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.value1)
}
inline void Request::set_value1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  value1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.value1)
}
inline void Request::set_value1(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  value1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.value1)
}
inline std::string* Request::_internal_mutable_value1() {
  _has_bits_[0] |= 0x00000008u;
  return value1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_value1() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.value1)
  if (!_internal_has_value1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return value1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_value1(std::string* value1) {
  if (value1 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  value1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.value1)
}
inline std::string* Request::unsafe_arena_release_value1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PennCloud.Request.value1)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return value1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request::unsafe_arena_set_allocated_value1(
    std::string* value1) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value1 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  value1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value1, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PennCloud.Request.value1)
}

// optional bytes value2 = 5;
inline bool Request::_internal_has_value2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Request::has_value2() const {
  return _internal_has_value2();
}
inline void Request::clear_value2() {
  value2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Request::value2() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.value2)
  return _internal_value2();
}
inline void Request::set_value2(const std::string& value) {
  _internal_set_value2(value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.value2)
}
inline std::string* Request::mutable_value2() {
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.value2)
  return _internal_mutable_value2();
}
inline const std::string& Request::_internal_value2() const {
  return value2_.Get();
}
inline void Request::_internal_set_value2(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  value2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_value2(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  value2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.value2)
}
inline void Request::set_value2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  value2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.value2)
}
inline void Request::set_value2(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  value2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.value2)
}
inline std::string* Request::_internal_mutable_value2() {
  _has_bits_[0] |= 0x00000010u;
  return value2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_value2() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.value2)
  if (!_internal_has_value2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return value2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_value2(std::string* value2) {
  if (value2 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  value2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.value2)
}
inline std::string* Request::unsafe_arena_release_value2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PennCloud.Request.value2)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return value2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request::unsafe_arena_set_allocated_value2(
    std::string* value2) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value2 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  value2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value2, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PennCloud.Request.value2)
}

// optional string command = 6;
inline bool Request::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Request::has_command() const {
  return _internal_has_command();
}
inline void Request::clear_command() {
  command_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Request::command() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.command)
  return _internal_command();
}
inline void Request::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.command)
}
inline std::string* Request::mutable_command() {
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.command)
  return _internal_mutable_command();
}
inline const std::string& Request::_internal_command() const {
  return command_.Get();
}
inline void Request::_internal_set_command(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_command(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  command_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.command)
}
inline void Request::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.command)
}
inline void Request::set_command(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.command)
}
inline std::string* Request::_internal_mutable_command() {
  _has_bits_[0] |= 0x00000020u;
  return command_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_command() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.command)
  if (!_internal_has_command()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return command_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.command)
}
inline std::string* Request::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PennCloud.Request.command)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return command_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request::unsafe_arena_set_allocated_command(
    std::string* command) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (command != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  command_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      command, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PennCloud.Request.command)
}

// optional string isServer = 7;
inline bool Request::_internal_has_isserver() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Request::has_isserver() const {
  return _internal_has_isserver();
}
inline void Request::clear_isserver() {
  isserver_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Request::isserver() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.isServer)
  return _internal_isserver();
}
inline void Request::set_isserver(const std::string& value) {
  _internal_set_isserver(value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.isServer)
}
inline std::string* Request::mutable_isserver() {
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.isServer)
  return _internal_mutable_isserver();
}
inline const std::string& Request::_internal_isserver() const {
  return isserver_.Get();
}
inline void Request::_internal_set_isserver(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  isserver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_isserver(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  isserver_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.isServer)
}
inline void Request::set_isserver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  isserver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.isServer)
}
inline void Request::set_isserver(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  isserver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.isServer)
}
inline std::string* Request::_internal_mutable_isserver() {
  _has_bits_[0] |= 0x00000040u;
  return isserver_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_isserver() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.isServer)
  if (!_internal_has_isserver()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return isserver_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_isserver(std::string* isserver) {
  if (isserver != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  isserver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), isserver,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.isServer)
}
inline std::string* Request::unsafe_arena_release_isserver() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PennCloud.Request.isServer)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return isserver_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request::unsafe_arena_set_allocated_isserver(
    std::string* isserver) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (isserver != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  isserver_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      isserver, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PennCloud.Request.isServer)
}

// optional string sender_server_index = 8;
inline bool Request::_internal_has_sender_server_index() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Request::has_sender_server_index() const {
  return _internal_has_sender_server_index();
}
inline void Request::clear_sender_server_index() {
  sender_server_index_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Request::sender_server_index() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.sender_server_index)
  return _internal_sender_server_index();
}
inline void Request::set_sender_server_index(const std::string& value) {
  _internal_set_sender_server_index(value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.sender_server_index)
}
inline std::string* Request::mutable_sender_server_index() {
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.sender_server_index)
  return _internal_mutable_sender_server_index();
}
inline const std::string& Request::_internal_sender_server_index() const {
  return sender_server_index_.Get();
}
inline void Request::_internal_set_sender_server_index(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  sender_server_index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_sender_server_index(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  sender_server_index_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.sender_server_index)
}
inline void Request::set_sender_server_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  sender_server_index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.sender_server_index)
}
inline void Request::set_sender_server_index(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  sender_server_index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.sender_server_index)
}
inline std::string* Request::_internal_mutable_sender_server_index() {
  _has_bits_[0] |= 0x00000080u;
  return sender_server_index_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_sender_server_index() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.sender_server_index)
  if (!_internal_has_sender_server_index()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return sender_server_index_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_sender_server_index(std::string* sender_server_index) {
  if (sender_server_index != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  sender_server_index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_server_index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.sender_server_index)
}
inline std::string* Request::unsafe_arena_release_sender_server_index() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PennCloud.Request.sender_server_index)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return sender_server_index_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request::unsafe_arena_set_allocated_sender_server_index(
    std::string* sender_server_index) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sender_server_index != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  sender_server_index_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sender_server_index, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PennCloud.Request.sender_server_index)
}

// optional string uniqueid = 9;
inline bool Request::_internal_has_uniqueid() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Request::has_uniqueid() const {
  return _internal_has_uniqueid();
}
inline void Request::clear_uniqueid() {
  uniqueid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& Request::uniqueid() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.uniqueid)
  return _internal_uniqueid();
}
inline void Request::set_uniqueid(const std::string& value) {
  _internal_set_uniqueid(value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.uniqueid)
}
inline std::string* Request::mutable_uniqueid() {
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.uniqueid)
  return _internal_mutable_uniqueid();
}
inline const std::string& Request::_internal_uniqueid() const {
  return uniqueid_.Get();
}
inline void Request::_internal_set_uniqueid(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  uniqueid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_uniqueid(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  uniqueid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.uniqueid)
}
inline void Request::set_uniqueid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  uniqueid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.uniqueid)
}
inline void Request::set_uniqueid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  uniqueid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.uniqueid)
}
inline std::string* Request::_internal_mutable_uniqueid() {
  _has_bits_[0] |= 0x00000100u;
  return uniqueid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_uniqueid() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.uniqueid)
  if (!_internal_has_uniqueid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return uniqueid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_uniqueid(std::string* uniqueid) {
  if (uniqueid != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  uniqueid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uniqueid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.uniqueid)
}
inline std::string* Request::unsafe_arena_release_uniqueid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PennCloud.Request.uniqueid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000100u;
  return uniqueid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request::unsafe_arena_set_allocated_uniqueid(
    std::string* uniqueid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uniqueid != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  uniqueid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uniqueid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PennCloud.Request.uniqueid)
}

// optional string preprocessed_response = 10;
inline bool Request::_internal_has_preprocessed_response() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Request::has_preprocessed_response() const {
  return _internal_has_preprocessed_response();
}
inline void Request::clear_preprocessed_response() {
  preprocessed_response_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& Request::preprocessed_response() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.preprocessed_response)
  return _internal_preprocessed_response();
}
inline void Request::set_preprocessed_response(const std::string& value) {
  _internal_set_preprocessed_response(value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.preprocessed_response)
}
inline std::string* Request::mutable_preprocessed_response() {
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.preprocessed_response)
  return _internal_mutable_preprocessed_response();
}
inline const std::string& Request::_internal_preprocessed_response() const {
  return preprocessed_response_.Get();
}
inline void Request::_internal_set_preprocessed_response(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  preprocessed_response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_preprocessed_response(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  preprocessed_response_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.preprocessed_response)
}
inline void Request::set_preprocessed_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  preprocessed_response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.preprocessed_response)
}
inline void Request::set_preprocessed_response(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  preprocessed_response_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.preprocessed_response)
}
inline std::string* Request::_internal_mutable_preprocessed_response() {
  _has_bits_[0] |= 0x00000200u;
  return preprocessed_response_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_preprocessed_response() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.preprocessed_response)
  if (!_internal_has_preprocessed_response()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return preprocessed_response_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_preprocessed_response(std::string* preprocessed_response) {
  if (preprocessed_response != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  preprocessed_response_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preprocessed_response,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.preprocessed_response)
}
inline std::string* Request::unsafe_arena_release_preprocessed_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PennCloud.Request.preprocessed_response)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000200u;
  return preprocessed_response_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request::unsafe_arena_set_allocated_preprocessed_response(
    std::string* preprocessed_response) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (preprocessed_response != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  preprocessed_response_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      preprocessed_response, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PennCloud.Request.preprocessed_response)
}

// optional string sequence_number = 11;
inline bool Request::_internal_has_sequence_number() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Request::has_sequence_number() const {
  return _internal_has_sequence_number();
}
inline void Request::clear_sequence_number() {
  sequence_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& Request::sequence_number() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.sequence_number)
  return _internal_sequence_number();
}
inline void Request::set_sequence_number(const std::string& value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.sequence_number)
}
inline std::string* Request::mutable_sequence_number() {
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.sequence_number)
  return _internal_mutable_sequence_number();
}
inline const std::string& Request::_internal_sequence_number() const {
  return sequence_number_.Get();
}
inline void Request::_internal_set_sequence_number(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  sequence_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_sequence_number(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  sequence_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.sequence_number)
}
inline void Request::set_sequence_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  sequence_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.sequence_number)
}
inline void Request::set_sequence_number(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000400u;
  sequence_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.sequence_number)
}
inline std::string* Request::_internal_mutable_sequence_number() {
  _has_bits_[0] |= 0x00000400u;
  return sequence_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_sequence_number() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.sequence_number)
  if (!_internal_has_sequence_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return sequence_number_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_sequence_number(std::string* sequence_number) {
  if (sequence_number != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  sequence_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sequence_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.sequence_number)
}
inline std::string* Request::unsafe_arena_release_sequence_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PennCloud.Request.sequence_number)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000400u;
  return sequence_number_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request::unsafe_arena_set_allocated_sequence_number(
    std::string* sequence_number) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sequence_number != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  sequence_number_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sequence_number, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PennCloud.Request.sequence_number)
}

// optional string new_primary_index = 12;
inline bool Request::_internal_has_new_primary_index() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Request::has_new_primary_index() const {
  return _internal_has_new_primary_index();
}
inline void Request::clear_new_primary_index() {
  new_primary_index_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& Request::new_primary_index() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.new_primary_index)
  return _internal_new_primary_index();
}
inline void Request::set_new_primary_index(const std::string& value) {
  _internal_set_new_primary_index(value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.new_primary_index)
}
inline std::string* Request::mutable_new_primary_index() {
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.new_primary_index)
  return _internal_mutable_new_primary_index();
}
inline const std::string& Request::_internal_new_primary_index() const {
  return new_primary_index_.Get();
}
inline void Request::_internal_set_new_primary_index(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  new_primary_index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_new_primary_index(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  new_primary_index_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.new_primary_index)
}
inline void Request::set_new_primary_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  new_primary_index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.new_primary_index)
}
inline void Request::set_new_primary_index(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000800u;
  new_primary_index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.new_primary_index)
}
inline std::string* Request::_internal_mutable_new_primary_index() {
  _has_bits_[0] |= 0x00000800u;
  return new_primary_index_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_new_primary_index() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.new_primary_index)
  if (!_internal_has_new_primary_index()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return new_primary_index_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_new_primary_index(std::string* new_primary_index) {
  if (new_primary_index != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  new_primary_index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), new_primary_index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.new_primary_index)
}
inline std::string* Request::unsafe_arena_release_new_primary_index() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PennCloud.Request.new_primary_index)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000800u;
  return new_primary_index_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request::unsafe_arena_set_allocated_new_primary_index(
    std::string* new_primary_index) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (new_primary_index != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  new_primary_index_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      new_primary_index, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PennCloud.Request.new_primary_index)
}

// optional string modified_server_index = 13;
inline bool Request::_internal_has_modified_server_index() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Request::has_modified_server_index() const {
  return _internal_has_modified_server_index();
}
inline void Request::clear_modified_server_index() {
  modified_server_index_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& Request::modified_server_index() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.modified_server_index)
  return _internal_modified_server_index();
}
inline void Request::set_modified_server_index(const std::string& value) {
  _internal_set_modified_server_index(value);
  // @@protoc_insertion_point(field_set:PennCloud.Request.modified_server_index)
}
inline std::string* Request::mutable_modified_server_index() {
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.modified_server_index)
  return _internal_mutable_modified_server_index();
}
inline const std::string& Request::_internal_modified_server_index() const {
  return modified_server_index_.Get();
}
inline void Request::_internal_set_modified_server_index(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  modified_server_index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_modified_server_index(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  modified_server_index_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PennCloud.Request.modified_server_index)
}
inline void Request::set_modified_server_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  modified_server_index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PennCloud.Request.modified_server_index)
}
inline void Request::set_modified_server_index(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00001000u;
  modified_server_index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PennCloud.Request.modified_server_index)
}
inline std::string* Request::_internal_mutable_modified_server_index() {
  _has_bits_[0] |= 0x00001000u;
  return modified_server_index_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_modified_server_index() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.modified_server_index)
  if (!_internal_has_modified_server_index()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return modified_server_index_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_modified_server_index(std::string* modified_server_index) {
  if (modified_server_index != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  modified_server_index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modified_server_index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.modified_server_index)
}
inline std::string* Request::unsafe_arena_release_modified_server_index() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PennCloud.Request.modified_server_index)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00001000u;
  return modified_server_index_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request::unsafe_arena_set_allocated_modified_server_index(
    std::string* modified_server_index) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (modified_server_index != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  modified_server_index_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      modified_server_index, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PennCloud.Request.modified_server_index)
}

// map<string, int32> rowkey_version = 14;
inline int Request::_internal_rowkey_version_size() const {
  return rowkey_version_.size();
}
inline int Request::rowkey_version_size() const {
  return _internal_rowkey_version_size();
}
inline void Request::clear_rowkey_version() {
  rowkey_version_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
Request::_internal_rowkey_version() const {
  return rowkey_version_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
Request::rowkey_version() const {
  // @@protoc_insertion_point(field_map:PennCloud.Request.rowkey_version)
  return _internal_rowkey_version();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
Request::_internal_mutable_rowkey_version() {
  return rowkey_version_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
Request::mutable_rowkey_version() {
  // @@protoc_insertion_point(field_mutable_map:PennCloud.Request.rowkey_version)
  return _internal_mutable_rowkey_version();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PennCloud

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_request_2eproto
