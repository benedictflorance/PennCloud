// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_request_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_request_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_request_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_request_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_request_2eproto;
namespace PennCloud {
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace PennCloud
PROTOBUF_NAMESPACE_OPEN
template<> ::PennCloud::Request* Arena::CreateMaybeMessage<::PennCloud::Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PennCloud {

// ===================================================================

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PennCloud.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit PROTOBUF_CONSTEXPR Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Request& from) {
    Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PennCloud.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kRowkeyFieldNumber = 2,
    kColumnkeyFieldNumber = 3,
    kValue1FieldNumber = 4,
    kValue2FieldNumber = 5,
  };
  // required string type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // required string rowkey = 2;
  bool has_rowkey() const;
  private:
  bool _internal_has_rowkey() const;
  public:
  void clear_rowkey();
  const std::string& rowkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rowkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rowkey();
  PROTOBUF_NODISCARD std::string* release_rowkey();
  void set_allocated_rowkey(std::string* rowkey);
  private:
  const std::string& _internal_rowkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rowkey(const std::string& value);
  std::string* _internal_mutable_rowkey();
  public:

  // required string columnkey = 3;
  bool has_columnkey() const;
  private:
  bool _internal_has_columnkey() const;
  public:
  void clear_columnkey();
  const std::string& columnkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_columnkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_columnkey();
  PROTOBUF_NODISCARD std::string* release_columnkey();
  void set_allocated_columnkey(std::string* columnkey);
  private:
  const std::string& _internal_columnkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_columnkey(const std::string& value);
  std::string* _internal_mutable_columnkey();
  public:

  // optional string value1 = 4;
  bool has_value1() const;
  private:
  bool _internal_has_value1() const;
  public:
  void clear_value1();
  const std::string& value1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value1();
  PROTOBUF_NODISCARD std::string* release_value1();
  void set_allocated_value1(std::string* value1);
  private:
  const std::string& _internal_value1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value1(const std::string& value);
  std::string* _internal_mutable_value1();
  public:

  // optional string value2 = 5;
  bool has_value2() const;
  private:
  bool _internal_has_value2() const;
  public:
  void clear_value2();
  const std::string& value2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value2();
  PROTOBUF_NODISCARD std::string* release_value2();
  void set_allocated_value2(std::string* value2);
  private:
  const std::string& _internal_value2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value2(const std::string& value);
  std::string* _internal_mutable_value2();
  public:

  // @@protoc_insertion_point(class_scope:PennCloud.Request)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rowkey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr columnkey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value2_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_request_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// required string type = 1;
inline bool Request::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request::has_type() const {
  return _internal_has_type();
}
inline void Request::clear_type() {
  _impl_.type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request::type() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request::set_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PennCloud.Request.type)
}
inline std::string* Request::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.type)
  return _s;
}
inline const std::string& Request::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Request::_internal_set_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Request::release_type() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Request::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.type)
}

// required string rowkey = 2;
inline bool Request::_internal_has_rowkey() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request::has_rowkey() const {
  return _internal_has_rowkey();
}
inline void Request::clear_rowkey() {
  _impl_.rowkey_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Request::rowkey() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.rowkey)
  return _internal_rowkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request::set_rowkey(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.rowkey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PennCloud.Request.rowkey)
}
inline std::string* Request::mutable_rowkey() {
  std::string* _s = _internal_mutable_rowkey();
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.rowkey)
  return _s;
}
inline const std::string& Request::_internal_rowkey() const {
  return _impl_.rowkey_.Get();
}
inline void Request::_internal_set_rowkey(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.rowkey_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_rowkey() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.rowkey_.Mutable(GetArenaForAllocation());
}
inline std::string* Request::release_rowkey() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.rowkey)
  if (!_internal_has_rowkey()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.rowkey_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rowkey_.IsDefault()) {
    _impl_.rowkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Request::set_allocated_rowkey(std::string* rowkey) {
  if (rowkey != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.rowkey_.SetAllocated(rowkey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rowkey_.IsDefault()) {
    _impl_.rowkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.rowkey)
}

// required string columnkey = 3;
inline bool Request::_internal_has_columnkey() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Request::has_columnkey() const {
  return _internal_has_columnkey();
}
inline void Request::clear_columnkey() {
  _impl_.columnkey_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Request::columnkey() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.columnkey)
  return _internal_columnkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request::set_columnkey(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.columnkey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PennCloud.Request.columnkey)
}
inline std::string* Request::mutable_columnkey() {
  std::string* _s = _internal_mutable_columnkey();
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.columnkey)
  return _s;
}
inline const std::string& Request::_internal_columnkey() const {
  return _impl_.columnkey_.Get();
}
inline void Request::_internal_set_columnkey(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.columnkey_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_columnkey() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.columnkey_.Mutable(GetArenaForAllocation());
}
inline std::string* Request::release_columnkey() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.columnkey)
  if (!_internal_has_columnkey()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.columnkey_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.columnkey_.IsDefault()) {
    _impl_.columnkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Request::set_allocated_columnkey(std::string* columnkey) {
  if (columnkey != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.columnkey_.SetAllocated(columnkey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.columnkey_.IsDefault()) {
    _impl_.columnkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.columnkey)
}

// optional string value1 = 4;
inline bool Request::_internal_has_value1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Request::has_value1() const {
  return _internal_has_value1();
}
inline void Request::clear_value1() {
  _impl_.value1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Request::value1() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.value1)
  return _internal_value1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request::set_value1(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.value1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PennCloud.Request.value1)
}
inline std::string* Request::mutable_value1() {
  std::string* _s = _internal_mutable_value1();
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.value1)
  return _s;
}
inline const std::string& Request::_internal_value1() const {
  return _impl_.value1_.Get();
}
inline void Request::_internal_set_value1(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.value1_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_value1() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.value1_.Mutable(GetArenaForAllocation());
}
inline std::string* Request::release_value1() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.value1)
  if (!_internal_has_value1()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.value1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value1_.IsDefault()) {
    _impl_.value1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Request::set_allocated_value1(std::string* value1) {
  if (value1 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.value1_.SetAllocated(value1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value1_.IsDefault()) {
    _impl_.value1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.value1)
}

// optional string value2 = 5;
inline bool Request::_internal_has_value2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Request::has_value2() const {
  return _internal_has_value2();
}
inline void Request::clear_value2() {
  _impl_.value2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Request::value2() const {
  // @@protoc_insertion_point(field_get:PennCloud.Request.value2)
  return _internal_value2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request::set_value2(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.value2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PennCloud.Request.value2)
}
inline std::string* Request::mutable_value2() {
  std::string* _s = _internal_mutable_value2();
  // @@protoc_insertion_point(field_mutable:PennCloud.Request.value2)
  return _s;
}
inline const std::string& Request::_internal_value2() const {
  return _impl_.value2_.Get();
}
inline void Request::_internal_set_value2(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.value2_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_value2() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.value2_.Mutable(GetArenaForAllocation());
}
inline std::string* Request::release_value2() {
  // @@protoc_insertion_point(field_release:PennCloud.Request.value2)
  if (!_internal_has_value2()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.value2_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value2_.IsDefault()) {
    _impl_.value2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Request::set_allocated_value2(std::string* value2) {
  if (value2 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.value2_.SetAllocated(value2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value2_.IsDefault()) {
    _impl_.value2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PennCloud.Request.value2)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace PennCloud

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_request_2eproto
